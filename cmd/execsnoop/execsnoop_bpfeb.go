// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ExecSnoopEvent struct {
	Pid       int32
	Ppid      int32
	Uid       uint32
	Retval    int32
	ArgsCount int32
	ArgsSize  uint32
	Comm      [16]int8
	Args      [7680]int8
}

// LoadExecSnoop returns the embedded CollectionSpec for ExecSnoop.
func LoadExecSnoop() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ExecSnoopBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ExecSnoop: %w", err)
	}

	return spec, err
}

// LoadExecSnoopObjects loads ExecSnoop and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ExecSnoopObjects
//	*ExecSnoopPrograms
//	*ExecSnoopMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadExecSnoopObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadExecSnoop()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ExecSnoopSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ExecSnoopSpecs struct {
	ExecSnoopProgramSpecs
	ExecSnoopMapSpecs
}

// ExecSnoopSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ExecSnoopProgramSpecs struct {
	TracepointSyscallsSysEnterExecve *ebpf.ProgramSpec `ebpf:"tracepoint__syscalls__sys_enter_execve"`
	TracepointSyscallsSysExitExecve  *ebpf.ProgramSpec `ebpf:"tracepoint__syscalls__sys_exit_execve"`
}

// ExecSnoopMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ExecSnoopMapSpecs struct {
	CgroupMap *ebpf.MapSpec `ebpf:"cgroup_map"`
	Events    *ebpf.MapSpec `ebpf:"events"`
	Execs     *ebpf.MapSpec `ebpf:"execs"`
}

// ExecSnoopObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadExecSnoopObjects or ebpf.CollectionSpec.LoadAndAssign.
type ExecSnoopObjects struct {
	ExecSnoopPrograms
	ExecSnoopMaps
}

func (o *ExecSnoopObjects) Close() error {
	return _ExecSnoopClose(
		&o.ExecSnoopPrograms,
		&o.ExecSnoopMaps,
	)
}

// ExecSnoopMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadExecSnoopObjects or ebpf.CollectionSpec.LoadAndAssign.
type ExecSnoopMaps struct {
	CgroupMap *ebpf.Map `ebpf:"cgroup_map"`
	Events    *ebpf.Map `ebpf:"events"`
	Execs     *ebpf.Map `ebpf:"execs"`
}

func (m *ExecSnoopMaps) Close() error {
	return _ExecSnoopClose(
		m.CgroupMap,
		m.Events,
		m.Execs,
	)
}

// ExecSnoopPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadExecSnoopObjects or ebpf.CollectionSpec.LoadAndAssign.
type ExecSnoopPrograms struct {
	TracepointSyscallsSysEnterExecve *ebpf.Program `ebpf:"tracepoint__syscalls__sys_enter_execve"`
	TracepointSyscallsSysExitExecve  *ebpf.Program `ebpf:"tracepoint__syscalls__sys_exit_execve"`
}

func (p *ExecSnoopPrograms) Close() error {
	return _ExecSnoopClose(
		p.TracepointSyscallsSysEnterExecve,
		p.TracepointSyscallsSysExitExecve,
	)
}

func _ExecSnoopClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed execsnoop_bpfeb.o
var _ExecSnoopBytes []byte
