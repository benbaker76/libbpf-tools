// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadTCPLife returns the embedded CollectionSpec for TCPLife.
func LoadTCPLife() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TCPLifeBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load TCPLife: %w", err)
	}

	return spec, err
}

// LoadTCPLifeObjects loads TCPLife and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *TCPLifeObjects
//     *TCPLifePrograms
//     *TCPLifeMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadTCPLifeObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadTCPLife()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// TCPLifeSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TCPLifeSpecs struct {
	TCPLifeProgramSpecs
	TCPLifeMapSpecs
}

// TCPLifeSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TCPLifeProgramSpecs struct {
	TraceInetSockSetState *ebpf.ProgramSpec `ebpf:"trace_inet_sock_set_state"`
}

// TCPLifeMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TCPLifeMapSpecs struct {
	Birth  *ebpf.MapSpec `ebpf:"birth"`
	Events *ebpf.MapSpec `ebpf:"events"`
	Whoami *ebpf.MapSpec `ebpf:"whoami"`
}

// TCPLifeObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadTCPLifeObjects or ebpf.CollectionSpec.LoadAndAssign.
type TCPLifeObjects struct {
	TCPLifePrograms
	TCPLifeMaps
}

func (o *TCPLifeObjects) Close() error {
	return _TCPLifeClose(
		&o.TCPLifePrograms,
		&o.TCPLifeMaps,
	)
}

// TCPLifeMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadTCPLifeObjects or ebpf.CollectionSpec.LoadAndAssign.
type TCPLifeMaps struct {
	Birth  *ebpf.Map `ebpf:"birth"`
	Events *ebpf.Map `ebpf:"events"`
	Whoami *ebpf.Map `ebpf:"whoami"`
}

func (m *TCPLifeMaps) Close() error {
	return _TCPLifeClose(
		m.Birth,
		m.Events,
		m.Whoami,
	)
}

// TCPLifePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadTCPLifeObjects or ebpf.CollectionSpec.LoadAndAssign.
type TCPLifePrograms struct {
	TraceInetSockSetState *ebpf.Program `ebpf:"trace_inet_sock_set_state"`
}

func (p *TCPLifePrograms) Close() error {
	return _TCPLifeClose(
		p.TraceInetSockSetState,
	)
}

func _TCPLifeClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed tcplife_bpfel.o
var _TCPLifeBytes []byte
