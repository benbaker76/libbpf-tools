// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type TCPConnLatPiddata struct {
	Comm [16]int8
	Ts   uint64
	Tgid uint32
	_    [4]byte
}

// LoadTCPConnLat returns the embedded CollectionSpec for TCPConnLat.
func LoadTCPConnLat() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TCPConnLatBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load TCPConnLat: %w", err)
	}

	return spec, err
}

// LoadTCPConnLatObjects loads TCPConnLat and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*TCPConnLatObjects
//	*TCPConnLatPrograms
//	*TCPConnLatMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadTCPConnLatObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadTCPConnLat()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// TCPConnLatSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TCPConnLatSpecs struct {
	TCPConnLatProgramSpecs
	TCPConnLatMapSpecs
}

// TCPConnLatSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TCPConnLatProgramSpecs struct {
	FentryTcpRcvStateProcess *ebpf.ProgramSpec `ebpf:"fentry_tcp_rcv_state_process"`
	FentryTcpV4Connect       *ebpf.ProgramSpec `ebpf:"fentry_tcp_v4_connect"`
	FentryTcpV6Connect       *ebpf.ProgramSpec `ebpf:"fentry_tcp_v6_connect"`
	TcpRcvStateProcess       *ebpf.ProgramSpec `ebpf:"tcp_rcv_state_process"`
	TcpV4Connect             *ebpf.ProgramSpec `ebpf:"tcp_v4_connect"`
	TcpV6Connect             *ebpf.ProgramSpec `ebpf:"tcp_v6_connect"`
}

// TCPConnLatMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TCPConnLatMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
	Start  *ebpf.MapSpec `ebpf:"start"`
}

// TCPConnLatObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadTCPConnLatObjects or ebpf.CollectionSpec.LoadAndAssign.
type TCPConnLatObjects struct {
	TCPConnLatPrograms
	TCPConnLatMaps
}

func (o *TCPConnLatObjects) Close() error {
	return _TCPConnLatClose(
		&o.TCPConnLatPrograms,
		&o.TCPConnLatMaps,
	)
}

// TCPConnLatMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadTCPConnLatObjects or ebpf.CollectionSpec.LoadAndAssign.
type TCPConnLatMaps struct {
	Events *ebpf.Map `ebpf:"events"`
	Start  *ebpf.Map `ebpf:"start"`
}

func (m *TCPConnLatMaps) Close() error {
	return _TCPConnLatClose(
		m.Events,
		m.Start,
	)
}

// TCPConnLatPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadTCPConnLatObjects or ebpf.CollectionSpec.LoadAndAssign.
type TCPConnLatPrograms struct {
	FentryTcpRcvStateProcess *ebpf.Program `ebpf:"fentry_tcp_rcv_state_process"`
	FentryTcpV4Connect       *ebpf.Program `ebpf:"fentry_tcp_v4_connect"`
	FentryTcpV6Connect       *ebpf.Program `ebpf:"fentry_tcp_v6_connect"`
	TcpRcvStateProcess       *ebpf.Program `ebpf:"tcp_rcv_state_process"`
	TcpV4Connect             *ebpf.Program `ebpf:"tcp_v4_connect"`
	TcpV6Connect             *ebpf.Program `ebpf:"tcp_v6_connect"`
}

func (p *TCPConnLatPrograms) Close() error {
	return _TCPConnLatClose(
		p.FentryTcpRcvStateProcess,
		p.FentryTcpV4Connect,
		p.FentryTcpV6Connect,
		p.TcpRcvStateProcess,
		p.TcpV4Connect,
		p.TcpV6Connect,
	)
}

func _TCPConnLatClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tcpconnlat_bpfeb.o
var _TCPConnLatBytes []byte
