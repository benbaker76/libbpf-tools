// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type TCPConnectIpv4FlowKey struct {
	Saddr uint32
	Daddr uint32
	Sport uint16
	Dport uint16
}

type TCPConnectIpv6FlowKey struct {
	Saddr [16]uint8
	Daddr [16]uint8
	Sport uint16
	Dport uint16
}

// LoadTCPConnect returns the embedded CollectionSpec for TCPConnect.
func LoadTCPConnect() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TCPConnectBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load TCPConnect: %w", err)
	}

	return spec, err
}

// LoadTCPConnectObjects loads TCPConnect and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*TCPConnectObjects
//	*TCPConnectPrograms
//	*TCPConnectMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadTCPConnectObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadTCPConnect()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// TCPConnectSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TCPConnectSpecs struct {
	TCPConnectProgramSpecs
	TCPConnectMapSpecs
}

// TCPConnectSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TCPConnectProgramSpecs struct {
	TcpV4Connect    *ebpf.ProgramSpec `ebpf:"tcp_v4_connect"`
	TcpV4ConnectRet *ebpf.ProgramSpec `ebpf:"tcp_v4_connect_ret"`
	TcpV6Connect    *ebpf.ProgramSpec `ebpf:"tcp_v6_connect"`
	TcpV6ConnectRet *ebpf.ProgramSpec `ebpf:"tcp_v6_connect_ret"`
}

// TCPConnectMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TCPConnectMapSpecs struct {
	Events    *ebpf.MapSpec `ebpf:"events"`
	Ipv4Count *ebpf.MapSpec `ebpf:"ipv4_count"`
	Ipv6Count *ebpf.MapSpec `ebpf:"ipv6_count"`
	Sockets   *ebpf.MapSpec `ebpf:"sockets"`
}

// TCPConnectObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadTCPConnectObjects or ebpf.CollectionSpec.LoadAndAssign.
type TCPConnectObjects struct {
	TCPConnectPrograms
	TCPConnectMaps
}

func (o *TCPConnectObjects) Close() error {
	return _TCPConnectClose(
		&o.TCPConnectPrograms,
		&o.TCPConnectMaps,
	)
}

// TCPConnectMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadTCPConnectObjects or ebpf.CollectionSpec.LoadAndAssign.
type TCPConnectMaps struct {
	Events    *ebpf.Map `ebpf:"events"`
	Ipv4Count *ebpf.Map `ebpf:"ipv4_count"`
	Ipv6Count *ebpf.Map `ebpf:"ipv6_count"`
	Sockets   *ebpf.Map `ebpf:"sockets"`
}

func (m *TCPConnectMaps) Close() error {
	return _TCPConnectClose(
		m.Events,
		m.Ipv4Count,
		m.Ipv6Count,
		m.Sockets,
	)
}

// TCPConnectPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadTCPConnectObjects or ebpf.CollectionSpec.LoadAndAssign.
type TCPConnectPrograms struct {
	TcpV4Connect    *ebpf.Program `ebpf:"tcp_v4_connect"`
	TcpV4ConnectRet *ebpf.Program `ebpf:"tcp_v4_connect_ret"`
	TcpV6Connect    *ebpf.Program `ebpf:"tcp_v6_connect"`
	TcpV6ConnectRet *ebpf.Program `ebpf:"tcp_v6_connect_ret"`
}

func (p *TCPConnectPrograms) Close() error {
	return _TCPConnectClose(
		p.TcpV4Connect,
		p.TcpV4ConnectRet,
		p.TcpV6Connect,
		p.TcpV6ConnectRet,
	)
}

func _TCPConnectClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tcpconnect_bpfeb.o
var _TCPConnectBytes []byte
