// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfIpv4FlowKey struct {
	Saddr uint32
	Daddr uint32
	Sport uint16
	Dport uint16
}

type bpfIpv6FlowKey struct {
	Saddr [16]uint8
	Daddr [16]uint8
	Sport uint16
	Dport uint16
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	TcpV4Connect    *ebpf.ProgramSpec `ebpf:"tcp_v4_connect"`
	TcpV4ConnectRet *ebpf.ProgramSpec `ebpf:"tcp_v4_connect_ret"`
	TcpV6Connect    *ebpf.ProgramSpec `ebpf:"tcp_v6_connect"`
	TcpV6ConnectRet *ebpf.ProgramSpec `ebpf:"tcp_v6_connect_ret"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	Events    *ebpf.MapSpec `ebpf:"events"`
	Ipv4Count *ebpf.MapSpec `ebpf:"ipv4_count"`
	Ipv6Count *ebpf.MapSpec `ebpf:"ipv6_count"`
	Sockets   *ebpf.MapSpec `ebpf:"sockets"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	Events    *ebpf.Map `ebpf:"events"`
	Ipv4Count *ebpf.Map `ebpf:"ipv4_count"`
	Ipv6Count *ebpf.Map `ebpf:"ipv6_count"`
	Sockets   *ebpf.Map `ebpf:"sockets"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.Events,
		m.Ipv4Count,
		m.Ipv6Count,
		m.Sockets,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	TcpV4Connect    *ebpf.Program `ebpf:"tcp_v4_connect"`
	TcpV4ConnectRet *ebpf.Program `ebpf:"tcp_v4_connect_ret"`
	TcpV6Connect    *ebpf.Program `ebpf:"tcp_v6_connect"`
	TcpV6ConnectRet *ebpf.Program `ebpf:"tcp_v6_connect_ret"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.TcpV4Connect,
		p.TcpV4ConnectRet,
		p.TcpV6Connect,
		p.TcpV6ConnectRet,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfeb.o
var _BpfBytes []byte
